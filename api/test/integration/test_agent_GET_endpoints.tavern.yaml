---
test_name: GET /agents

marks:
  - base_tests

stages:

  - name: Get all agents
    request: &get_agents
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json: &basic_response
        error: !anyint
        data:
          affected_items:
            - id: '000'
            - id: '001'
            - id: '002'
            - id: '003'
            - id: '004'
            - id: '005'
            - id: '006'
            - id: '007'
            - id: '008'
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Get all agents inverse order
    request:
      verify: False
      <<: *get_agents
      params:
        sort: -id
    response:
      status_code: 200
      json: &basic_response_inverse
        error: !anyint
        data:
          affected_items:
            - id: '012'
            - id: '011'
            - id: '010'
            - id: '009'
            - id: '008'
            - id: '007'
            - id: '006'
            - id: '005'
            - id: '004'
            - id: '003'
            - id: '002'
            - id: '001'
            - id: '000'
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Pagination with offset 0 and limit 2
    request:
      verify: False
      <<: *get_agents
      params:
        offset: 0
        limit: 2
    response:
      status_code: 200
      save:
        json:
          expected_agent_name: data.affected_items[0].name
          expected_os_platform: data.affected_items[0].os.platform
          expected_os_version: data.affected_items[0].os.version
          expected_os_name: data.affected_items[0].os.name
          expected_manager_host: data.affected_items[0].manager
          expected_node_name: data.affected_items[0].node_name
          expected_name: data.affected_items[0].name
          expected_ip: data.affected_items[0].ip
      json:
        error: !anyint
        data:
          affected_items:
            - status: active
              id: '000'
            - status: active
              id: '001'
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Try to show agents using offset -1
    request:
      verify: False
      <<: *get_agents
      params:
        offset: -1
    response:
      status_code: 400
      json: &error_spec
        detail: !anystr
        title: !anystr

  - name: Try to show agents with offset not integer value
    request:
      verify: False
      <<: *get_agents
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *get_agents
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try to show agents with limit 0
    request:
      verify: False
      <<: *get_agents
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with an invalid limit value
    request:
      verify: False
      <<: *get_agents
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with limit 9999
    request:
      verify: False
      <<: *get_agents
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Sort
    request:
      verify: False
      <<: *get_agents
      params:
        sort: -id
        limit: 2
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '012'
            - id: '011'
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Try to show agents using wrong sort
    request:
      verify: False
      <<: *get_agents
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *get_agents
      params:
        search: '000'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a search with no return
    request:
      verify: False
      <<: *get_agents
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data: &affected_empty_answer
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Filter select one field
    request:
      verify: False
      <<: *get_agents
      params:
        select: 'os.platform'
        limit: 2
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              os:
                platform: !anystr
            - id: '001'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Filter select multiple fields
    request:
      verify: False
      <<: *get_agents
      params:
        select: 'dateAdd,mergedSum'
        limit: 2
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '001'
              dateAdd: !anystr
              mergedSum: !anystr
            - id: '002'
              dateAdd: !anystr
              mergedSum: !anystr
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Try to show agents using a not allowed selector
    request:
      verify: False
      <<: *get_agents
      params:
        select: param_test
    response:
      status_code: 400
      json:
        error: 1724

  - name: Try to show agents using not allowed selector (invalid character)
    request:
      verify: False
      <<: *get_agents
      params:
        select: param_%_test
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent version
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'Wazuh v3.9.2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try to show agents using a non existing version
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'TestVersion'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid version
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'Test%Version'
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Platform
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: "{expected_os_platform:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              os:
                platform: "{expected_os_platform:s}"
          failed_items: []
          total_affected_items: 11
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Platform
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: test_platform
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try show agents with not existed OS Platform (invalid character)
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: test_%_platform
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: "{expected_os_version:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              os:
                version: "{expected_os_version:s}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: test_version
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: test_version_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: "{expected_os_name:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              os:
                name: "{expected_os_name:s}"
          failed_items: []
          total_affected_items: 11
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: test_name
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: test_name_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: "{expected_node_name:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              node_name: "{expected_node_name:s}"
          failed_items: []
          total_failed_items: 0

  - name: Try to show agents using a non existing Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: test_node_name%
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try show agents using an invalid Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: test_node_name_*
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: "{expected_name:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              name: "{expected_name:s}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a non existing agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: test_name
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: test_name_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: "{expected_ip:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              ip: "{expected_ip:s}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a non existing IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: test_ip
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: test_ip_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: "{expected_manager_host:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - manager: "{expected_manager_host:s}"
          failed_items: []
          total_failed_items: 0

  - name: Try to show agents using a non existing ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: test_manager
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: test_manager_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent status
    request:
      verify: False
      <<: *get_agents
      params:
        status: disconnected
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter by agent status 2
    request:
      verify: False
      <<: *get_agents
      params:
        status: disconnected,never_connected
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter by agent status 3 (Upper and lowercase letters in values)
    request:
      verify: False
      <<: *get_agents
      params:
        status: DiScoNNected
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try to show agents with a non existing status
    request:
      verify: False
      <<: *get_agents
      params:
        status: test_status
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by group
    request:
      verify: False
      <<: *get_agents
      params:
        group: group1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '001'
            - id: '005'
            - id: '007'
            - id: '008'
            - id: '009'
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Try to show agents using a non existing group
    request:
      verify: False
      <<: *get_agents
      params:
        group: test_group
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try show agents using an invalid group
    request:
      verify: False
      <<: *get_agents
      params:
        group: test_group_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=group2;lastKeepAlive<1d
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '002'
            - id: '005'
            - id: '006'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter agents by complex query
    request:
      verify: False
      <<: *get_agents
      params:
        q: id<5;id!=2;manager~waz;(os.major=16,os.major=18)
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
            - id: '001'
            - id: '003'
            - id: '004'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try to show agents using an wrong query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try to show agents using an invalid query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents using older_than param
    request:
      verify: False
      <<: *get_agents
      params:
        older_than: 30s
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents using an invalid older_than
    request:
      verify: False
      <<: *get_agents
      params:
        older_than: bad_time
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show a list of agents
    request:
      verify: False
      <<: *get_agents
      params:
        agents_list: "001,002,003"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - status: active
              id: '001'
            - status: active
              id: '002'
            - status: active
              id: '003'
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0

---
test_name: GET /agents with single agent id

stages:

  # GET /agents?agents_list=000
  - name: Basic response agent
    request: &get_agent
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: '000'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - dateAdd: !anystr
              id: "000"
              ip: !anystr
              lastKeepAlive: !anystr
              manager: !anystr
              name: !anystr
              node_name: !anystr
              os:
                arch: !anystr
                codename: !anystr
                major: !anystr
                minor: !anystr
                name: !anystr
                platform: !anystr
                uname: !anystr
                version: !anystr
              registerIP: !anystr
              status: !anystr
              version: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents?agents_list=999
  - name: Try to show not existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: '999'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items:
            - id:
                - '999'
              error:
                code: 1701
          total_affected_items: 0
          total_failed_items: 1

  # GET /agents?agents_list=wrong_name
  - name: Try show not existing agent by name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: wrong_name
    response:
      status_code: 400
      json:
        <<: *error_spec

  # GET /agents?agents_list=000&select=os.platform
  - name: Filter select one field
    request:
      verify: False
      <<: *get_agent
      params:
        select: 'os.platform'
        agents_list: '000'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents?agents_list=000&select=dateAdd,status
  - name: Filter select multiple fields
    request:
      verify: False
      <<: *get_agent
      params:
        select: 'dateAdd,status'
        agents_list: '000'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '000'
              dateAdd: !anystr
              status: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents?agents_list=000&select=param_test
  - name: Try show agents with not allowed selector
    request:
      verify: False
      <<: *get_agent
      params:
        select: param_test
        agents_list: '000'
    response:
      status_code: 400
      json:
        error: 1724

  # GET /agents?agents_list=000&select=param_%_test
  - name: Try show agents with not allowed selector (invalid character)
    request:
      verify: False
      <<: *get_agent
      params:
        select: param_%_test
        agents_list: '000'
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents/{agent_id}/config/{component}/{configuration}

stages:

  # GET /agents/001/config/agent/client
  - name: Request-Agent-Client
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/agent/client"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          client:
            auto_restart: !anystr
            config-profile: !anystr
            crypto_method: !anystr
            notify_time: !anyint
            remote_conf: !anystr
            server: !anything
            time-reconnect: !anyint

  - name: Request-Agent-Buffer
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/agent/buffer"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          buffer:
            disabled: !anystr
            queue_size: !anyint
            events_per_second: !anyint

  - name: Request-Agent-Labels
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/agent/labels"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          labels: !anything

  - name: Request-Agent-Internal
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/agent/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            agent:
              debug: !anyint
              min_eps: !anyint
              normal_level: !anyint
              recv_timeout: !anyint
              remote_conf: !anyint
              state_interval: !anyint
              tolerance: !anyint
              warn_level: !anyint
            monitord:
              compress: !anyint
              daily_rotations: !anyint
              day_wait: !anyint
              keep_log_days: !anyint
              rotate_log: !anyint
              size_rotate: !anyint
            remoted:
              comp_average_printout: !anyint
              max_attempts: !anyint
              recv_counter_flush: !anyint
              request_pool: !anyint
              request_rto_msec: !anyint
              request_rto_sec: !anyint
              verify_msg_id: !anyint

  - name: Request-Analysis-Global
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/analysis/global"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          global:
            alerts_log: !anystr
            email_notification: !anystr
            host_information: !anyint
            integrity_checking: !anyint
            jsonout_output: !anystr
            logall: !anystr
            logall_json: !anystr
            max_output_size: !anyint
            memory_size: !anyint
            prelude_output: !anystr
            rootkit_detection: !anyint
            rotate_interval: !anyint
            stats: !anyint
            white_list: !anything
            zeromq_output: !anystr

  - name: Request-Analysis-Active-response
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/analysis/active_response"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          active-response: !anything

  - name: Request-Analysis-Alerts
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/analysis/alerts"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          alerts:
            email_alert_level: !anyint
            log_alert_level: !anyint

  - name: Request-Analysis-Command
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/analysis/command"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          command: !anything

  - name: Request-Analysis-Internal
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/analysis/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            analysisd:
              debug: !anyint
              decoder_order_size: !anyint
              default_timeframe: !anyint
              fts_list_size: !anyint
              fts_min_size_for_str: !anyint
              label_cache_maxage: !anyint
              log_fw: !anyint
              min_rotate_interval: !anyint
              rlimit_nofile: !anyint
              show_hidden_labels: !anyint
              stats_maxdiff: !anyint
              stats_mindiff: !anyint
              stats_percent_diff: !anyint

  - name: Request-Auth-Auth
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/auth/auth"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          auth:
            ciphers: !anystr
            disabled: !anystr
            force_insert: !anystr
            force_time: !anystr
            port: !anyint
            purge: !anystr
            ssl_auto_negotiate: !anystr
            ssl_manager_cert: !anystr
            ssl_manager_key: !anystr
            ssl_verify_host: !anystr
            use_password: !anystr
            use_source_ip: !anystr

  - name: Request-Com-Active-response (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/com/active-response"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          active-response:
            disabled: !anystr

  - name: Request-Com-Active-response (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/com/active-response"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          active-response:
            ca_store: !anything
            ca_verification: !anystr
            disabled: !anystr

  - name: Request-Com-Internal (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/com/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            execd:
              request_timeout: !anyint
              max_restart_lock: !anyint

  - name: Request-Com-Internal (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/com/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            execd:
              request_timeout: !anyint
              max_restart_lock: !anyint

  - name: Request-Com-Cluster (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/com/cluster"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          bind_addr: !anystr
          disabled: !anybool
          hidden: !anystr
          key: !anystr
          name: !anystr
          node_name: !anystr
          node_type: !anystr
          nodes: !anything
          port: !anyint

  - name: Request-Logcollector-Localfile (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/logcollector/localfile"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          localfile: !anything

  - name: Request-Logcollector-Localfile (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/logcollector/localfile"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          localfile: !anything

  - name: Request-Logcollector-Socker (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/logcollector/socket"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request-Logcollector-Socker (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/logcollector/socket"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request-Logcollector-Internal (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/logcollector/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            logcollector:
              debug: !anyint
              force_reload: !anyint
              input_threads: !anyint
              loop_timeout: !anyint
              max_files: !anyint
              max_lines: !anyint
              open_attempts: !anyint
              queue_size: !anyint
              reload_delay: !anyint
              reload_interval: !anyint
              remote_commands: !anyint
              rlimit_nofile: !anyint
              sample_log_length: !anyint
              sock_fail_time: !anyint
              vcheck_files: !anyint

  - name: Request-Logcollector-Internal (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/logcollector/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            logcollector:
              debug: !anyint
              force_reload: !anyint
              input_threads: !anyint
              loop_timeout: !anyint
              max_files: !anyint
              max_lines: !anyint
              open_attempts: !anyint
              queue_size: !anyint
              reload_delay: !anyint
              reload_interval: !anyint
              remote_commands: !anyint
              rlimit_nofile: !anyint
              sample_log_length: !anyint
              sock_fail_time: !anyint
              vcheck_files: !anyint

  - name: Request-Monitor-Internal
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/monitor/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          monitord:
            compress: !anyint
            daily_rotations: !anyint
            day_wait: !anyint
            delete_old_agents: !anyint
            keep_log_days: !anyint
            monitor_agents: !anyint
            rotate_log: !anyint
            sign: !anyint
            size_rotate: !anyint

  - name: Request-Request-Remote
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/request/remote"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          remote:
            - connection: !anystr
              ipv6: !anystr
              port: !anystr
              protocol: !anystr
              queue_size: !anystr

  - name: Request-Request-Internal
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/request/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            remoted:
              buffer_relax: !anyint
              comp_average_printout: !anyint
              group_data_flush: !anyint
              guess_agent_group: !anyint
              max_attempts: !anyint
              merge_shared: !anyint
              pass_empty_keyfile: !anyint
              receive_chunk: !anyint
              recv_counter_flush: !anyint
              recv_timeout: !anyint
              request_pool: !anyint
              request_rto_msec: !anyint
              request_rto_sec: !anyint
              request_timeout: !anyint
              response_timeout: !anyint
              rlimit_nofile: !anyint
              sender_pool: !anyint
              shared_reload: !anyint
              verify_msg_id: !anyint

  - name: Request-Syscheck-Syscheck (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/syscheck/syscheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          syscheck:
            directories: !anything
            disabled: !anystr
            frequency: !anyint
            ignore: !anything
            nodiff: !anything
            scan_on_start: !anystr
            skip_nfs: !anystr
            whodata: !anything

  - name: Request-Syscheck-Syscheck (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/syscheck/syscheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          syscheck:
            directories: !anything
            disabled: !anystr
            frequency: !anyint
            ignore: !anything
            nodiff: !anything
            scan_on_start: !anystr
            skip_nfs: !anystr
            whodata: !anything

  - name: Request-Syscheck-Rootcheck (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/syscheck/rootcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          rootcheck:
            check_dev: !anystr
            check_files: !anystr
            check_if: !anystr
            check_pids: !anystr
            check_ports: !anystr
            check_sys: !anystr
            check_trojans: !anystr
            check_unixaudit: !anystr
            disabled: !anystr
            frequency: !anyint
            rootkit_files: !anystr
            rootkit_trojans: !anystr
            scanall: !anystr
            skip_nfs: !anystr

  - name: Request-Syscheck-Rootcheck (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/syscheck/rootcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          rootcheck:
            check_dev: !anystr
            check_files: !anystr
            check_if: !anystr
            check_pids: !anystr
            check_ports: !anystr
            check_sys: !anystr
            check_trojans: !anystr
            check_unixaudit: !anystr
            disabled: !anystr
            frequency: !anyint
            rootkit_files: !anystr
            rootkit_trojans: !anystr
            scanall: !anystr
            skip_nfs: !anystr

  - name: Request-Syscheck-Internal (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/syscheck/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            rootcheck:
              sleep: !anyint
            syscheck:
              debug: !anyint
              default_max_depth: !anyint
              max_audit_entries: !anyint
              rt_delay: !anyint
              file_max_size: !anyint
              symlink_scan_interval: !anyint

  - name: Request-Syscheck-Internal (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/syscheck/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          internal:
            syscheck:
              rt_delay: !anyint
              default_max_depth: !anyint
              symlink_scan_interval: !anyint
              debug: !anyint
              file_max_size: !anyint
              max_audit_entries: !anyint
            rootcheck:
              sleep: !anyint


  - name: Request-Wmodules-Wmodules (Manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/config/wmodules/wmodules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          wmodules: !anything

  - name: Request-Wmodules-Wmodules (Agent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/wmodules/wmodules"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          wmodules: !anything

  - name: Try to show config of a non existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/config/mail/global"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response: &resource_not_found
      status_code: 404
      json:
        error: 1701

  - name: Try to show config of an invalid agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/wrong_name/config/mail/global"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Request Error Component Parameter
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/wrong_component/global"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Request Error Configuration Parameter
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/mail/wrong_configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Request Error Component and Configuration Parameters
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/config/wrong_component/wrong_configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents/{agent_id}/group/is_sync

stages:

  - name: Try to get sync of agent 000 (manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items:
            - id:
                - '000'
              error:
                code: 1703
          total_affected_items: 0
          total_failed_items: 1

  - name: Try to get sync of a non existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items:
            - id:
                - '999'
              error:
                code: 1701
          total_affected_items: 0
          total_failed_items: 1

  - name: Try get sync agent by name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/bad_id/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Get agent sync
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/group/is_sync"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '001'
              synced: !anybool
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /agents/{agent_id}/key

stages:

  - name: Try get key agent 000 (manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/000/key"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items:
            - id:
                - '000'
              error:
                code: 1703
          total_affected_items: 0
          total_failed_items: 1

  - name: Try get key not existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/999/key"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items:
            - id:
                - '999'
              error:
                code: 1701
          total_affected_items: 0
          total_failed_items: 1

  - name: Try get key agent by name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/bad_id/key"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Get agent key
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/001/key"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '001'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /groups

stages:

  - name: Basic response agents groups
    request: &get_agents_groups
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      save:
        json:
          expected_total_agents: data.affected_items[2].count
      json:
        error: !anyint
        data: &get_groups_answer
          affected_items:
            - name: 'default'
              count: 10
            - name: 'group1'
              count: 5
            - name: 'group2'
              count: 5
            - name: 'group3'
              count: 4
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: 2
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: 'group2'
              count: 5
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show groups with offset -1
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with offset not integer value
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with offset too large 99999999999 (valid)
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: 99999999999
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show groups with offset too large 9999999999999999999 (SQLite error)
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: 9999999999999999999
    response:
      status_code: 400 # /groups now uses WazuhDBQuery and SQLite cannot handle too large integers
      json:
        detail: !anystr
        error: 2003

  - name: Try show groups with limit 0
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with limit not integer value
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with limit 9999
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Sort
    request:
      verify: False
      <<: *get_agents_groups
      params:
        sort: -name
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: 'group3'
              count: 4
            - name: 'group2'
              count: 5
            - name: 'group1'
              count: 5
            - name: 'default'
              count: 10
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try to show groups with wrong sort
    request:
      verify: False
      <<: *get_agents_groups
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *get_agents_groups
      params:
        search: default
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: 'default'
              count: 10
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show groups with wrong search
    request:
      verify: False
      <<: *get_agents_groups
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try show agents with wrong hash
    request:
      verify: False
      <<: *get_agents_groups
      params:
        hash: wrong_hash
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to get a list of groups information
    request:
      verify: False
      <<: *get_agents_groups
      params:
        groups_list: 'group1,group3'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: 'group1'
            - name: 'group3'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

---
test_name: GET /groups filter hash

marks:
  - parametrize:
      key: hash
      vals:
        - md5
        - sha1
        - sha224
        - sha256
        - sha384
        - sha512
        - blake2b
        - blake2s
        - sha3_224
        - sha3_256
        - sha3_384
        - sha3_512

stages:

  - name: Filter hash
    request:
      verify: False
      <<: *get_agents_groups
      params:
        hash: "{hash:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *get_groups_answer

---
test_name: GET /groups/{group_id}/agents

stages:

  - name: Try get all agents in one group
    request: &groups_id_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/group3/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: 1
        limit: 2
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '006'
            - id: '007'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 9999
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Params, bad group name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response: &resource_not_found_group
      status_code: 404
      json:
        error: 1710

  - name: Params, invalid group name (not alphanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%_group/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: -id
        limit: 3
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '008'
            - id: '007'
            - id: '006'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with wrong sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *groups_id_request
      params:
        search: '008'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '008'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with wrong search
    request:
      verify: False
      <<: *groups_id_request
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Filter select one field
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: 'os.platform'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '003'
              os:
                platform: !anystr
            - id: '006'
              os:
                platform: !anystr
            - id: '007'
              os:
                platform: !anystr
            - id: '008'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter select multiple fields
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: 'dateAdd,mergedSum'
        limit: 1
        offset: 2
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '007'
              dateAdd: !anystr
              mergedSum: !anystr
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with not allowed selector
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: param_test
    response:
      status_code: 400
      json:
        error: 1724

  - name: Try show agents with not allowed selector (invalid character)
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: param_%_test
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Status multiple
    request:
      verify: False
      <<: *groups_id_request
      params:
        status: active,disconnected
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with not allowed status
    request:
      verify: False
      <<: *groups_id_request
      params:
        status: wrong_status
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=group1;lastKeepAlive<1d
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter agents by complex query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: id<5;id!=2;manager~waz;(os.major>14,os.major<20)
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '003'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with bad query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try show agents with bad query (invalid character)
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /groups/{group_id}/agents {sort,select}

marks:
  - parametrize:
      key: field
      vals:
        - configSum
        - dateAdd
        - group
        - id
        - ip
        - lastKeepAlive
        - manager
        - mergedSum
        - name
        - node_name
        - os.arch
        - os.build
        - os.codename
        - os.major
        - os.minor
        - os.name
        - os.platform
        - os.uname
        - os.version
        - registerIP
        - status
        - version

stages:

  - name: Filter groups, select
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter groups, sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: !anystr
            - id: !anystr
            - id: !anystr
            - id: !anystr
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

---
test_name: GET /groups/{group_id}/configuration

stages:

  - name: Try get the configuration of a group
    request: &groups_id_config_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/default/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      status_code: 200
      json: &groups_id_config_response
        error: !anyint
        data:
          affected_items:
            - config: !anything
              filters: !anything
          total_affected_items: !anyint

  - name: Try get the configuration of a bad group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      <<: *resource_not_found_group

  - name: Try get the configuration of a bad group (not alphanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%group/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Pagination
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        offset: 0
        limit: 1
    response:
      status_code: 200
      json:
        <<: *groups_id_config_response

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          total_affected_items: 1

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 9999
    request:
      verify: False
      <<: *groups_id_config_request
      params:
        limit: 9999
    response:
      status_code: 400

---
test_name: GET /groups/{group_id}/files

stages:

  - name: Try get the files of a group
    request: &groups_id_files_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/default/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 2
        offset: 0
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: !anystr
              hash: !anystr
            - filename: !anystr
              hash: !anystr
          total_affected_items: !anyint
          total_failed_items: 0
          failed_items: []
      save:
        json:
          filename_saved: data.affected_items[1].filename
          hash_saved: data.affected_items[1].hash

  - name: Pagination
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        limit: 1
        offset: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: "{filename_saved}"
              hash: "{hash_saved}"
          total_affected_items: !anyint
          total_failed_items: 0
          failed_items: []

  - name: Try get the files of a group with offset -1
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try get the files of a group with offset not integer value
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try get the files of a group with offset too large 9999999999999999999
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          total_affected_items: !anyint
          total_failed_items: 0
          failed_items: []

  - name: Try get the files of a group with limit 0
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try get the files of a group with limit not integer value
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try get the files of a group with limit 9999
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Try get the files of a bad group name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          total_affected_items: 0
          total_failed_items: 1
          failed_items:
            - error:
                code: 1710
              id:
                - wrong_group

  - name: Try get the files of a bad group name (no alphanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%_group/files"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Sort
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        sort: -hash
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          total_affected_items: !anyint
          total_failed_items: 0
          failed_items: []

  - name: Try get the files of a group with wrong sort
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        search: agent.conf
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: !anystr
              hash: !anystr
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []

  - name: Try get the files of a group with wrong search
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          total_affected_items: 0
          total_failed_items: 0
          failed_items: []

  - name: Try get the files of a group, filter bad hash
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        hash: wrong_hash
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /groups/{group_id}/files filter hash

marks:
  - parametrize:
      key: hash
      vals:
        - md5
        - sha1
        - sha224
        - sha256
        - sha384
        - sha512
        - blake2b
        - blake2s
        - sha3_224
        - sha3_256
        - sha3_384
        - sha3_512

stages:

  - name: Filter hash
    request:
      verify: False
      <<: *groups_id_files_request
      params:
        hash: "{hash:s}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - filename: !anystr
              hash: !anystr
          total_affected_items: !anyint
          total_failed_items: 0
          failed_items: []

---
test_name: GET /groups/{group_id}/files/{filename}/json

stages:

  - name: Try get one file of a group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/default/files/agent.conf/json"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data: !anything

  - name: Try get one file of a group, bad group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/files/agent.conf/json"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *resource_not_found_group

  - name: Try get one file of a group, bad group (not aplhanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%_group/files/agent.conf/json"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /groups/{group_id}/files/{filename}/xml

stages:

  - name: Try get one file of a group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/default/files/agent.conf/xml"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      headers:
        content-type: application/xml; charset=utf-8


  - name: Try get one file of a group, bad group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/files/agent.conf/xml"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *resource_not_found_group

  - name: Try get one file of a group, bad group (not aplhanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%_group/files/agent.conf/xml"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents?name=agent_name

stages:

  - name: Basic response agents name
    request: &get_agents_by_name
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        name: wazuh-agent1
    response:
      status_code: 200
      json:
        error: !anyint
        data: &get_agents_by_name_response
          affected_items:
            - id: '001'
              name: 'wazuh-agent1'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Error agent name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents?name=wrong_agent"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        name: wrong_agent
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          total_affected_items: 0

  - name: Select one field
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: name
        name: wazuh-agent1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *get_agents_by_name_response

  - name: Select three fields
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: name,id,status
        name: wazuh-agent1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '001'
              name: 'wazuh-agent1'
              status: 'active'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with wrong select
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: wrong_select
        name: wazuh-agent1
    response:
      status_code: 400
      json:
        error: 1724

---
test_name: GET /agents/no_group

stages:

  - name: Get the agents without group
    request: &no_group_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/no_group"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json: &no_group_response
        error: !anyint
        data:
          affected_items:
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *no_group_request
      params:
        offset: 0
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '011'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *no_group_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *no_group_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *no_group_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *no_group_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *no_group_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 9999
    request:
      verify: False
      <<: *no_group_request
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Sort
    request:
      verify: False
      <<: *no_group_request
      params:
        sort: -id
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '012'
            - id: '011'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try show agents with wrong sort
    request:
      verify: False
      <<: *no_group_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *no_group_request
      params:
        search: wazuh-agent11
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '011'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with empty search
    request:
      verify: False
      <<: *no_group_request
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Filter agents by query
    request:
      verify: False
      <<: *no_group_request
      params:
        q: registerIP=any
    response:
      status_code: 200
      json:
        <<: *no_group_response

  - name: Try show agents with bad query
    request:
      verify: False
      <<: *no_group_request
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try show agents with bad query (invalid character)
    request:
      verify: False
      <<: *no_group_request
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents/no_group {sort,select}

marks:
  - parametrize:
      key: field
      vals:
        - dateAdd
        - id
        - ip
        - name
        - node_name
        - registerIP
        - status

stages:

  - name: Get the agents without group, sort
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/no_group"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        sort: "{field}"
    response:
      status_code: 200
      json:
        <<: *no_group_response

  - name: Select
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/no_group"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        select: "{field}"
    response:
      status_code: 200
      json:
        <<: *no_group_response

---
test_name: GET /agents/outdated

stages:

  - name: Get the outdated agents
    request: &agents_outdated_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/outdated"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        sort: -id
    response:
      status_code: 200
      json:
        error: !anyint
        data: &outdated_agents_response
          affected_items:
            - id: '010'
            - id: '009'
            - id: '008'
            - id: '007'
            - id: '006'
            - id: '005'
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        offset: 1
        limit: 1
        sort: -id
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '009'
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 9999
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Try show agents with wrong sort
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Filter agents by query
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        q: group=default;lastKeepAlive>1d
        sort: -id
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '010'
            - id: '009'
          failed_items: [ ]
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter agents by query
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        q: id>5;id!=9;name~waz;(os.major=16,os.major=18)
        limit: 30
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - id: '006'
            - id: '007'
            - id: '008'
            - id: '010'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with bad query
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try show agents with bad query (invalid character)
    request:
      verify: False
      <<: *agents_outdated_request
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents/stats/distinct

stages:

  - name: Returns all the different combinations that agents have for the selected fields. It also indicates the total number of agents that have each combination.
    request: &distinct_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        <<: *basic_response

  - name: Get the different combinations for os.platform
    request:
      verify: False
      <<: *distinct_request
      params:
        limit: 2
        fields: os.platform
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: !anyint
              os:
                platform: !anystr
            - count: !anyint
                os:
                  platform: unknown
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Get the status and os.name
    request:
      verify: False
      <<: *distinct_request
      params:
        fields:
          - os.name
          - status
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: !anyint
              status: active
              os:
                name: Ubuntu
            - count: !anyint
              status: disconnected
              os:
                name: Ubuntu
            - count: !anyint
              status: never_connected
              os:
                name: unknown

          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Fields error
    request:
      verify: False
      <<: *distinct_request
      params:
        limit: 2
        fields: wrong_field
    response:
      status_code: 400
      json:
        error: 1724

  - name: Get the different combinations for os.platform, search
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        fields: os.platform
        search: linux
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: !anyint
              os:
                platform: ubuntu
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Invalid select
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 2
        fields: os.platform
        select: invalid
    response:
      status_code: 400
      json:
        error: 1724

  - name: Pagination
    request:
      verify: False
      <<: *distinct_request
      params:
        offset: 0
        limit: 1
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: !anyint
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *distinct_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *distinct_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *distinct_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *distinct_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *distinct_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 9999
    request:
      verify: False
      <<: *distinct_request
      params:
        limit: 9999
    response:
      status_code: 400

  - name: Sort
    request:
      verify: False
      <<: *distinct_request
      params:
        sort: -id
    response:
      status_code: 200
      json:
        <<: *basic_response_inverse

  - name: Try show agents with wrong sort
    request:
      verify: False
      <<: *distinct_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *distinct_request
      params:
        search: unknown
        fields: node_name
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: 2
              node_name: 'unknown'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try show agents with wrong search
    request:
      verify: False
      <<: *distinct_request
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          <<: *affected_empty_answer

  - name: Try show agents with bad query
    request:
      verify: False
      <<: *distinct_request
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try show agents with bad query (invalid character)
    request:
      verify: False
      <<: *distinct_request
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with complex query
    request:
      verify: False
      <<: *distinct_request
      params:
        fields: status
        q: id<5;id!=2;manager~waz;(os.major=16,os.major=18)
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - count: 4
              status: 'active'
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

---
test_name: GET /agents/stats/distinct {fields}

marks:
  - parametrize:
      key: field
      vals:
        - dateAdd
        - id
        - ip
        - lastKeepAlive
        - manager
        - name
        - node_name
        - os.arch
        - os.build
        - os.codename
        - os.major
        - os.minor
        - os.name
        - os.platform
        - os.uname
        - os.version
        - registerIP
        - status
        - version

stages:

  - name: Get the different combinations for all fields
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/stats/distinct"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        fields: "{field}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

---
test_name: GET /agents/summary/status

stages:

  - name: Get the agents status summary
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/summary/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          active: 8
          disconnected: 2
          never_connected: 2
          pending: 0
          total: 12

---
test_name: GET /agents/summary/os

stages:

  - name: Get the summary/os of all agents
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/summary/os"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - ubuntu
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []

---
test_name: GET /agents/upgrade_result

stages:

  - name: Try get upgrade result agent 000 (manager)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade_result"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: '000'
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - id:
                - '000'
              error:
                code: 1703
          total_affected_items: 0
          total_failed_items: 1

  - name: Try get upgrade result not existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade_result"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: 999,1000
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - id:
                - '999'
                - '1000'
              error:
                code: 1813
          total_affected_items: 0
          total_failed_items: 2

  - name: Try get upgrade result agent by name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade_result"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: bad_id
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Upgrade agents
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force: True
        agents_list: 001,002,000
        version: 4.0.0
    response:
      status_code: 200
      json:
        error: 2
        data:
          affected_items:
            - agent: '001'
              task_id: !anyint
            - agent: '002'
              task_id: !anyint
          total_affected_items: 2
          total_failed_items: 1
          failed_items:
            - error:
                code: 1703
                message: !anystr
                remediation: !anystr
              id:
                - '000'
        message: !anystr

  - name: Get agents upgrade results
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents/upgrade_result"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: 000,001,002,009,010,999
    response:
      status_code: 200
      json:
        error: 2
        data:
          affected_items:
            - message: Success
              agent: '001'
              task_id: !anyint
              module: upgrade_module
              command: upgrade
              status: !anystr
              create_time: !anystr
              update_time: !anystr
            - message: Success
              agent: '002'
              task_id: !anyint
              module: upgrade_module
              command: upgrade
              status: !anystr
              create_time: !anystr
              update_time: !anystr
          total_affected_items: 2
          total_failed_items: 4
          failed_items:
            - error:
                code: 1703
                message: !anystr
                remediation: !anystr
              id:
                - '000'
            - error:
                code: 1813
                message: !anystr
                remediation: !anything
              id:
                - '009'
                - '010'
                - '999'
        message: !anystr
